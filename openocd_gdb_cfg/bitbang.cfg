# To test OpenOCD with the simulator don't forget the following modifications in JSON-config:
#   - Remove 'init' command in the 'InitCommands' list
#   - Disable CpuMonitor (attribute Enable=false) to avoid reading 'haltsum0' DMI register
#   - Disable GUI (GUI=false)
#
# Otherwise, simulator will interferences with OpenOCD using JTAG interface of the TAP
adapter driver remote_bitbang

log_output "openocd.log"
debug_level 3

remote_bitbang host localhost
remote_bitbang port 9824

set _CHIPNAME riscv
jtag newtap $_CHIPNAME cpu -irlen 5 -expected-id 0x10e31913

set _TARGETNAME $_CHIPNAME.cpu
target create $_TARGETNAME riscv -chain-position $_TARGETNAME

gdb_report_data_abort enable
reset_config trst_only
# This is default settings and default sequence (progbuf sysbus abstract).
# All three are supported by current DMI and must be checked
riscv set_mem_access progbuf

# See https://openocd.org/doc/html/Architecture-and-Core-Commands.html
# Custom CSRs 0xBC0 and 0xBC1 under custom names: "csr_mstackovr" and "csr_mstackund"
#$_TARGETNAME expose_csrs 3008=mstackovr
#$_TARGETNAME expose_csrs 3009=mstackund

echo "!!! command: init"
# [0x10] <= 00000000 dmcontroC:\Projects\riscv_vhdl\openocd_gdb_cfg\bitbang.cfgcsrl: dmactive=0
# [0x10] <= 00000001 dmcontrol: dmactive=1
# [0x10] <= 07ffffc1 dmcontrol: hasel hartselhi=1023 hartsello=1023 dmactive
# [0x10] => 00030001 dmcontrol: hartsello=3 dmactive
# [0x11] => 0000f0a2 dmstatus: allnonexistent anynonexistent allunavail anyunavail authenticated hasresethaltreq version=2
# [0x12] <= 00000000 hartinfo: (no available for this core)
# [0x38] => 2000000f sbcs: sbversion=1 sbaccess64 sbaccess32 sbaccess16 sbaccess8
# [0x16] => 10000004 abstractcs: progbufsize=16 datacount=4
# [0x10] => 00030001 dmcontrol: hartsello=3 dmactive
# [0x10] <= 00000001 dmcontrol: hartselhi=0 hartsello=0 dmactive
# [0x11] => 00000ca2 dmstatus: allrunning anyrunning authenticated hasresethaltreq version=2
# [0x10] => 00000001 dmcontrol: dmactive (hartsel=0 not shown in the log)
# [0x10] <= 00010001 dmcontrol: hartselhi=0 hartsello=1 dmactive
# [0x11] => 0000f0a2 dmstatus: allnonexistent anynonexistent allunavail anyunavail authenticated hasresethaltreq version=2
# [0x10] => 00010001 dmcontrol: hartsello=1 dmactive
# [0x10] <= 00000001 dmcontrol: hartselhi=0 hartsello=0 dmactive
# [0x11] => 00000ca2 dmstatus: allrunning anyrunning authenticated hasresethaltreq version=2
# [0x10] <= 80000001 dmcontrol: haltreq dmactive
# [0x11] => 000003a2 dmstatus: allhalted anyhalted authenticated hasresethaltreq version=2
# [0x11] => 000003a2 dmstatus: allhalted anyhalted authenticated hasresethaltreq version=2
# [0x10] <= 00000001 dmcontrol: dmactive (hartsel=0 not shown)
# [0x17] <= 00321008 command: access register, size=64, postexec=0, transfer=1, write=0, regno=0x1008
# [0x16] => 10000004 abstractcs: progbufsize=16 datacount=4
# [0x17] <= 00321008 command: access register, size=64, postexec=0, transfer=1, write=0, regno=0x1008
# [0x16] => 10000004 abstractcs: progbufsize=16 datacount=4
# [0x05] => 00000000 data1: s0[63:32]
# [0x04] => 1007ed98 data0: s0[31:0]
# [0x17] <= 00321009 command: access register, size=64, postexec=0, transfer=1, write=0, regno=0x1009
# [0x16] => 10000004 abstractcs: progbufsize=16 datacount=4
# [0x05] => 00000000 data1: s1[63:32]
# [0x04] => 00000078 data0: s1[31:0]
# [0x17] <= 0x320301 command: access register, size=64, postexec=0, transfer=1, write=0, regno=0x301
# [0x16] => 10000004 abstractcs: progbufsize=16 datacount=4
# [0x05] => 80000000 data1: CSR misa[63:32]
# [0x04] => 0010110d data0: CSR misa[31:0]  misa = 0x800000000010110d
# [0x05] <= 00000000 data1: s0 <- 0x1007ed98
# [0x04] <= 1007ed98 data0: 
# [0x17] <= 0x331008 command: access register, size=64, postexec=0, transfer=1, write=1, regno=0x1008
# [0x16] => 10000004 abstractcs: progbufsize=16 datacount=4
# [0x05] <= 00000000 data1: s1 <- 0x78
# [0x04] <= 00000078 data0: 
# [0x17] <= 0x331009 command: access register, size=64, postexec=0, transfer=1, write=1, regno=0x1009
# [0x16] => 10000004 abstractcs: progbufsize=16 datacount=4
# [0x11] => 000003a2 dmstatus: allhalted anyhalted authenticated hasresethaltreq version=2
# [0x10] <= 40000001 dmcontrol: resumereq dmactive
# [0x11] => 00030ca2 dmstatus: allresumeack anyresumeack allrunning anyrunning authenticated hasresethaltreq version=2
# [0x10] <= 00000001 dmcontrol: dmactive
# polling all harts
init

echo "!!! command: halt 1"
# [0x10] <= 80000001 dmcontrol: haltreq dmactive
# [0x11] => 000303a2 dmstatus: allresumeack anyresumeack allhalted anyhalted authenticated hasresethaltreq version=2
# [0x10] <= 00000001 dmcontrol: dmactive
halt

#echo "!!! command: resume"
# [0x11] => 000303a2 dmstatus: allresumeack anyresumeack allhalted anyhalted authenticated hasresethaltreq version=2
# [0x20] <= 0000100f progbuf0: FENCE_I
# [0x21] <= 0000000f progbuf1: FENCE
# [0x22] <= 00100073 progbuf2: EBREAK
# [0x17] <= 0x241000 command: access register, size=32, postexec=1, transfer=0, write=0, regno=0x1000
# [0x16] => 10001004 abstractcs: progbufsize=16 busy datacount=4
# .. while busy
# [0x16] => 10000004 abstractcs: progbufsize=16 datacount=4
# [0x17] <= 0x3207b0 command: access register, size=64, postexec=0, transfer=1, write=0, regno=0x7b0
# [0x16] => 10000004 abstractcs: progbufsize=16 datacount=4
# [0x05] => 00000000 data1: dcsr[63:32]
# [0x04] => 400000c3 data0: dcsr[31:0] dcsr = 400000c3
# [0x05] <= 00000000 data1: dcsr[63:32] dcsr <- 4000b0c3  (+ebreakm,+ebreaks,+ebreaku)
# [0x04] <= 400000c3 data0: dcsr[31:0] 
# [0x17] <= 0x3307b0 command: access register, size=64, postexec=0, transfer=1, write=1, regno=0x7b0
# [0x16] => 10000004 abstractcs: progbufsize=16 datacount=4
# [0x11] => 000303a2 dmstatus: allresumeack anyresumeack allhalted anyhalted authenticated hasresethaltreq version=2
# [0x10] <= 40000001 dmcontrol: resumereq dmactive
# [0x11] => 00030ca2 dmstatus: allresumeack anyresumeack allrunning anyrunning authenticated hasresethaltreq version=2
# [0x10] <= 00000001 dmcontrol: dmactive
#resume

#echo "!!! command: sleep 1000 msec"
# [0x11] => 00030ca2 dmstatus: allresumeack anyresumeack allrunning anyrunning authenticated hasresethaltreq version=2
# ... polling
#sleep 1000

#echo "!!! command: halt 2"
# [0x10] <= 80000001 dmcontrol: haltreq dmactive
# [0x11] => 000303a2 dmstatus: allresumeack anyresumeack allhalted anyhalted authenticated hasresethaltreq version=2
# [0x10] <= 00000001 dmcontrol: dmactive
#halt

#echo "!!! command: step"
# [0x17] <= 003207a0 command: access register, size=64, postexec=0, transfer=1, write=0, regno=0x7a0
# [0x16] => 10000004 abstractcs: progbufsize=16 datacount=4
# [0x05] => 00000000 data1: tselect[63:32]
# [0x04] => 00000000 data0: tselect[31:0] tselect = 00000000
# [0x05] <= 00000000 data1: tselect[63:32] tselect <- 00000000
# [0x04] <= 00000000 data0: tselect[31:0] 
# [0x17] <= 003307a0 command: access register, size=64, postexec=0, transfer=1, write=1, regno=0x7a0
# [0x16] => 10000004 abstractcs: progbufsize=16 datacount=4
# [0x17] <= 003207a0 command: access register, size=64, postexec=0, transfer=1, write=0, regno=0x7a0
# [0x16] => 10000004 abstractcs: progbufsize=16 datacount=4
# [0x05] => 00000000 data1: tselect[63:32]
# [0x04] => 00000000 data0: tselect[31:0] tselect = 00000000
# [0x17] <= 003207a1 command: access register, size=64, postexec=0, transfer=1, write=0, regno=0x7a1
# [0x16] => 10000004 abstractcs: progbufsize=16 datacount=4
# [0x05] => 00000000 data1: tdata1[63:32]
# [0x04] => 00000000 data0: tdata1[31:0] tdata1 = 00000000
# [0x05] <= 00000000 data1: tselect[63:32] tselect <- 00000000
# [0x04] <= 00000000 data0: tselect[31:0] 
# [0x17] <= 003307a0 command: access register, size=64, postexec=0, transfer=1, write=1, regno=0x7a0
# [0x16] => 10000004 abstractcs: progbufsize=16 datacount=4
# Found 0 triggers (tinfo wasn't read accordingly with spec)
# skipped: progbuf cached and no need to write FENCE_I,FENCE,EBREAK
# [0x17] <= 0x241000 command: access register, size=32, postexec=1, transfer=0, write=0, regno=0x1000
# [0x16] => 10001004 abstractcs: progbufsize=16 busy datacount=4
# .. while busy
# [0x16] => 10000004 abstractcs: progbufsize=16 datacount=4
# [0x17] <= 0x3207b0 command: access register, size=64, postexec=0, transfer=1, write=0, regno=0x7b0
# [0x16] => 10000004 abstractcs: progbufsize=16 datacount=4
# [0x05] => 00000000 data1: dcsr[63:32]
# [0x04] => 400080c3 data0: dcsr[31:0] dcsr = 400080c3
# [0x05] <= 00000000 data1: dcsr[63:32] dcsr <- 4000b0c7  (+ebreaks,+ebreaku,+step)
# [0x04] <= 400000c3 data0: dcsr[31:0] 
# [0x17] <= 0x3307b0 command: access register, size=64, postexec=0, transfer=1, write=1, regno=0x7b0
# [0x16] => 10000004 abstractcs: progbufsize=16 datacount=4
# [0x11] => 000303a2 dmstatus: allresumeack anyresumeack allhalted anyhalted authenticated hasresethaltreq version=2
# [0x10] <= 40000001 dmcontrol: resumereq dmactive
# [0x11] => 00030ca2 dmstatus: allresumeack anyresumeack allrunning anyrunning authenticated hasresethaltreq version=2
# [0x10] <= 00000001 dmcontrol: dmactive
# [0x11] => 00030ca2 dmstatus: allresumeack anyresumeack allrunning anyrunning authenticated hasresethaltreq version=2
#step

echo "!!! command: reg"
# Only polling, no actions
reg

echo "!!! reset halt: "
# TRST = 1 (async reset active HIGH, no TCK)
# TRST = 0
# [0x10] <= 00000003 dmcontrol: ndmreset dmactive (system reset except DMI)
# [0x10] <= 80000001 dmcontrol: haltreq dmactive (deassert ndmreset and haltreq)
reset halt

echo "!!! step 1 "
step
echo "!!! step 2 "
step

# Check exception on memory access
# This exception breaks the script execution
#echo "!!! mwd 0xfffff02C 0x8877665544332211 unaligned access"
#mwd 0x100ff02C 0x8877665544332211

#echo "!!! mwd 0x30000020 0x8877665544332211 unmapped access"
#mwd 0x30000020 0x8877665544332211

##mdd [phys] addr [count] display 3 doublewords
echo "!!! mwd 0x100ff028 0x8877665544332211"
mwd 0xfffff028 0x8877665544332211
echo "!!! mdd 0x100ff028: "
mdd 0xfffff028

echo "!!! mww 0x100ff02C 0xAABBCCDD"
mww 0xfffff02C 0xAABBCCDD
echo "!!! mdd 0x100ff028: "
mdd 0xfffff028
echo "!!! mdw 0x100ff02C: "
mdw 0xfffff02C

echo "!!! mwh 0x100ff02E 0xEEFF"
mwh 0xfffff02E 0xEEFF
echo "!!! mdd 0x100ff028 "
mdd 0xfffff028
echo "!!! mdh 0x100ff02E "
mdh 0xfffff02E

echo "!!! mwb 0x100ff02F 0x10"
mwb 0xfffff02F 0x10
echo "!!! mdd 0x100ff028 "
mdd 0xfffff028
echo "!!! mdb 0x100ff02F "
mdb 0xfffff02F

echo "!!! step 3 "
step

echo "!!! load_image "
load_image ../examples/helloworld/makefiles/bin/helloworld

echo "!!! verify_image "
verify_image ../examples/helloworld/makefiles/bin/helloworld

echo "!!! END !!! command: shutdown"
shutdown

